{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PriceInfoResponse",
  "type": "object",
  "required": [
    "price_feed",
    "time"
  ],
  "properties": {
    "price_feed": {
      "description": "Pyth Price Feed",
      "allOf": [
        {
          "$ref": "#/definitions/PriceFeed"
        }
      ]
    },
    "time": {
      "description": "The timestamp that the price was published to the wormhole",
      "allOf": [
        {
          "$ref": "#/definitions/Timestamp"
        }
      ]
    }
  },
  "definitions": {
    "PriceFeed": {
      "description": "Represents a current aggregation price from pyth publisher feeds.",
      "type": "object",
      "required": [
        "conf",
        "ema_conf",
        "ema_price",
        "expo",
        "id",
        "max_num_publishers",
        "num_publishers",
        "price",
        "product_id",
        "status"
      ],
      "properties": {
        "conf": {
          "description": "Confidence interval around the price.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ema_conf": {
          "description": "Exponentially moving average confidence interval.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ema_price": {
          "description": "Exponentially moving average price.",
          "type": "integer",
          "format": "int64"
        },
        "expo": {
          "description": "Price exponent.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Unique identifier for this price.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "max_num_publishers": {
          "description": "Maximum number of allowed publishers that can contribute to a price.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "num_publishers": {
          "description": "Number of publishers that made up current aggregate.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "price": {
          "description": "The current price.",
          "type": "integer",
          "format": "int64"
        },
        "product_id": {
          "description": "Product account key.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "status": {
          "description": "Status of price (Trading is valid).",
          "allOf": [
            {
              "$ref": "#/definitions/PriceStatus"
            }
          ]
        }
      }
    },
    "PriceStatus": {
      "description": "Represents availability status of a price feed.",
      "type": "string",
      "enum": [
        "Unknown",
        "Trading",
        "Halted",
        "Auction"
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
